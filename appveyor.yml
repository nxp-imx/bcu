version: bcu_1.1.78

skip_tags: true

#- switched to 2017 for now because VS 2019 imagines does not have coverity build tool
environment:
  matrix:
    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
    - APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu1804
    - APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu2004
    - APPVEYOR_BUILD_WORKER_IMAGE: macOS-BigSur
  bcu_coverity_token:
    secure: YuctP7YsJQIzsrBQtgEfwkYPu3StAEWV9SgPIBjwZDo=

platform:
- x64

configuration: 
- Release

init:
# skip x86 check in linux  
- sh: if [ "${PLATFORM}" = "x86" ]; then exit 0; fi
- sh: if [ "${CONFIGURATION}" = "Debug" ] ; then exit 0; fi

install:
# - sh: sudo apt-get update
- cmd: git submodule update --init
# - ps: if ($env:APPVEYOR_BUILD_WORKER_IMAGE -eq "Visual Studio 2017") { wget "https://www.ftdichip.com/Drivers/CDM/CDM%20v2.12.28%20WHQL%20Certified.zip" -o d2xx.zip; wget "http://stahlworks.com/dev/unzip.exe" -o unzip.exe; unzip.exe "d2xx.zip" -d msvs/d2xx/;}
- sh: git submodule update --init
# - sh: if [ "${APPVEYOR_BUILD_WORKER_IMAGE}" = "Ubuntu1804" ]; then (sudo DEBIAN_FRONTEND=noninteractive apt-get  update); fi
- sh: if [ "${APPVEYOR_BUILD_WORKER_IMAGE}" = "Ubuntu1804" ]; then (sudo DEBIAN_FRONTEND=noninteractive apt-get  --yes --force-yes install libconfuse-dev swig python-dev libboost-all-dev); fi
- sh: if [ "${APPVEYOR_BUILD_WORKER_IMAGE}" = "Ubuntu1804" ]; then (sudo DEBIAN_FRONTEND=noninteractive apt-get  --yes --force-yes install libyaml-dev); fi
- sh: if [ "${APPVEYOR_BUILD_WORKER_IMAGE}" = "Ubuntu1804" ]; then (sudo DEBIAN_FRONTEND=noninteractive apt-get  --yes --force-yes install libftdi1-dev); fi
- sh: if [ "${APPVEYOR_BUILD_WORKER_IMAGE}" = "Ubuntu1804" ]; then (sudo DEBIAN_FRONTEND=noninteractive apt-get  --yes --force-yes install libusb-1.0-0-dev); fi
- sh: if [ "${APPVEYOR_BUILD_WORKER_IMAGE}" = "Ubuntu1804" ]; then (sudo DEBIAN_FRONTEND=noninteractive apt-get  --yes --force-yes install openssl); fi
# - sh: if [ "${APPVEYOR_BUILD_WORKER_IMAGE}" = "Ubuntu2004" ]; then (sudo DEBIAN_FRONTEND=noninteractive apt-get  update); fi
- sh: if [ "${APPVEYOR_BUILD_WORKER_IMAGE}" = "Ubuntu2004" ]; then (sudo DEBIAN_FRONTEND=noninteractive apt-get  --yes --force-yes install libconfuse-dev swig python-dev libboost-all-dev); fi
- sh: if [ "${APPVEYOR_BUILD_WORKER_IMAGE}" = "Ubuntu2004" ]; then (sudo DEBIAN_FRONTEND=noninteractive apt-get  --yes --force-yes install libyaml-dev); fi
- sh: if [ "${APPVEYOR_BUILD_WORKER_IMAGE}" = "Ubuntu2004" ]; then (sudo DEBIAN_FRONTEND=noninteractive apt-get  --yes --force-yes install libftdi1-dev); fi
- sh: if [ "${APPVEYOR_BUILD_WORKER_IMAGE}" = "Ubuntu2004" ]; then (sudo DEBIAN_FRONTEND=noninteractive apt-get  --yes --force-yes install libusb-1.0-0-dev); fi
- sh: if [ "${APPVEYOR_BUILD_WORKER_IMAGE}" = "Ubuntu2004" ]; then (sudo DEBIAN_FRONTEND=noninteractive apt-get  --yes --force-yes install openssl libssl-dev); fi
- sh: if [ "${APPVEYOR_BUILD_WORKER_IMAGE}" = "macOS-BigSur" ]; then ( brew update;); fi
- sh: if [ "${APPVEYOR_BUILD_WORKER_IMAGE}" = "macOS-BigSur" ]; then ( brew remove curl libssh2; brew reinstall pkgconfig; export PATH="/usr/local/Cellar/pkg-config/0.29.2_3/bin:${PATH}"; brew reinstall libyaml openssl openssl@1.1; brew install libftdi; pkg-config --list-all;); fi

build_script:
- sh: if [ "${APPVEYOR_BUILD_WORKER_IMAGE}" = "Ubuntu1804" ]; then (cmake .); fi
- sh: if [ "${APPVEYOR_BUILD_WORKER_IMAGE}" = "Ubuntu2004" ]; then (cmake .); fi
- sh: if [ "${APPVEYOR_BUILD_WORKER_IMAGE}" = "macOS-BigSur" ]; then (export PATH="/usr/local/Cellar/pkg-config/0.29.2_3/bin:${PATH}"; export PKG_CONFIG_PATH="/usr/local/opt/openssl@1.1/lib/pkgconfig"; cmake .); fi
- sh: make
- sh: if [ "${APPVEYOR_BUILD_WORKER_IMAGE}" = "Ubuntu1804" ]; then (mv bcu bcu_Ubuntu18); fi
- sh: if [ "${APPVEYOR_BUILD_WORKER_IMAGE}" = "Ubuntu2004" ]; then (mv bcu bcu_Ubuntu20); fi

# no schedule coverity check:
#- cmd: cov-build --dir cov-int msbuild %APPVEYOR_BUILD_FOLDER%/Board_Control_Utilities.sln /verbosity:minimal /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll"

# scheduled coverity check:
- cmd: if "%APPVEYOR_SCHEDULED_BUILD%" == "True" (cov-build --dir cov-int msbuild %APPVEYOR_BUILD_FOLDER%/Board_Control_Utilities.sln /verbosity:minimal /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll") else (msbuild %APPVEYOR_BUILD_FOLDER%/Board_Control_Utilities.sln /verbosity:minimal /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll")
- cmd: if "%APPVEYOR_SCHEDULED_BUILD%" == "True" (7z a -tzip bcu.zip cov-int)
- cmd: if "%APPVEYOR_SCHEDULED_BUILD%" == "True" (curl --form token=%bcu_coverity_token% --form email=frank.li@nxp.com  --form file=@bcu.zip --form version="appveyor_upload"  --form description="attempt to automate coverity scan" https://scan.coverity.com/builds?project=NXPmicro%2Fbcu)

# get artifact:
- cmd: if exist %APPVEYOR_BUILD_FOLDER%\x64\Release\Board_Control_Utilities.exe  (cp %APPVEYOR_BUILD_FOLDER%\x64\Release\Board_Control_Utilities.exe  %APPVEYOR_BUILD_FOLDER%\bcu.exe)

artifacts:
- path: bcu.exe
- path: bcu_Ubuntu18
- path: bcu_Ubuntu20
- path: bcu_mac

before_deploy:
- cmd: ''
deploy:
- provider: GitHub
  description: prebuild for $(APPVEYOR_REPO_COMMIT) \n\n $(APPVEYOR_REPO_COMMIT_MESSAGE)
  auth_token:
    secure: SWWVkwSfPyVIaPChBBl+uAA3Fau9Rl5iNPQ9VRL8yyggXvc6wPcr/O9iXBMVM7Ju
  artifact: bcu.exe;  bcu_Ubuntu18;  bcu_Ubuntu20;  bcu_mac;
  draft: true
